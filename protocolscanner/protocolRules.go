package protocolscanner

type ProtocolRule struct {
	Protocol string
	TcpPorts []int
	UdpPorts []int
	IsSsl    bool
	Rules    []Rule
}

type Rule struct {
	Payload []byte
	Match   []Matches
}

type Matches struct {
	Pattern string
	Keyword []byte
}

var ProtocolRules_ = []ProtocolRule{
	{
		Protocol: "ftp",
		TcpPorts: []int{21, 2121},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("220"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("500"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("550"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("421"),
				},
			},
		},
		},
	},
	{
		Protocol: "rdp",
		TcpPorts: []int{3389},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x03\x00\x00\x13\x0e\xe0\x00\x00\x00\x00\x00\x01\x00\x08\x00\x03\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x03\x00\x00\x13\x0e"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x03\x00\x00\x0b\x06"),
				},
			},
		},
		},
	},
	{
		Protocol: "http",
		TcpPorts: []int{80, 8080},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("HTTP"),
				},
			},
		},
		},
	},
	{
		Protocol: "https",
		TcpPorts: []int{80, 443, 8080},
		UdpPorts: []int{},
		IsSsl:    true,
		Rules: []Rule{{
			Payload: []byte("GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("HTTP"),
				},
			},
		},
		},
	},
	{
		Protocol: "msrpc",
		TcpPorts: []int{135, 49152, 49154, 49153, 49155},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x05\x00\x01\x03\x10\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x05\x00\x0d\x03\x10\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x04\x00\x01\x05\x00\x00\x00\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "mysql",
		TcpPorts: []int{3306, 3307, 3310},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("mysql"),
				},
				{
					Pattern: "contains",
					Keyword: []byte("Mysql"),
				},
				{
					Pattern: "contains",
					Keyword: []byte("MySQL"),
				},
				{
					Pattern: "contains",
					Keyword: []byte("MariaDB"),
				},
			},
		},
		},
	},
	{
		Protocol: "ntp",
		TcpPorts: []int{},
		UdpPorts: []int{123, 1604, 4040},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\xe3\x00\x04\xfa\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc5\x4f\x23\x4b\x71\xb1\x52\xf3"),
			Match: []Matches{
				{
					Pattern: "regex",
					Keyword: []byte("\x24[\x01-\x0f].............................................."),
				},
				{
					Pattern: "regex",
					Keyword: []byte("\xe4[\x00\x04].............................................."),
				},
				{
					Pattern: "regex",
					Keyword: []byte("\x1c[\x01-\x0f].............................................."),
				},
				{
					Pattern: "regex",
					Keyword: []byte("\xdc[\x00-\x0f].............................................."),
				},
				{
					Pattern: "regex",
					Keyword: []byte("\x5c\x03.............................................."),
				},
				{
					Pattern: "regex",
					Keyword: []byte("\x64\x03.............................................."),
				},
			},
		},
			{
				Payload: []byte("\x1e\x00\x01\x30\x02\xfd\xa8\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
				Match: []Matches{
					{
						Pattern: "regex",
						Keyword: []byte("\x1e\xc0\x010\x02\x00\xa8\xe3\x00\x00\x00\x00"),
					},
				},
			},
		},
	},
	{
		Protocol: "pptp",
		TcpPorts: []int{1723},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x9c\x00\x01\x1a\x2b\x3c\x4d\x00\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\xff\xff\x00\x01\x6e\x6f\x6e\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6e\x6d\x61\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x9c\x00\x01\x1a\x2b\x3c\x4d\x00\x02\x00\x00\x01\x00\x01\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "rtsp",
		TcpPorts: []int{554, 8554},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("RTSP"),
				},
			},
		},
		},
	},
	{
		Protocol: "sip",
		TcpPorts: []int{5060},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x4f\x50\x54\x49\x4f\x4e\x53\x20\x73\x69\x70\x3a\x6e\x6d\x20\x53\x49\x50\x2f\x32\x2e\x30\x0d\x0a\x56\x69\x61\x3a\x20\x53\x49\x50\x2f\x32\x2e\x30\x2f\x54\x43\x50\x20\x6e\x6d\x3b\x62\x72\x61\x6e\x63\x68\x3d\x66\x6f\x6f\x3b\x72\x70\x6f\x72\x74\x0d\x0a\x46\x72\x6f\x6d\x3a\x20\x3c\x73\x69\x70\x3a\x6e\x6d\x40\x6e\x6d\x3e\x3b\x74\x61\x67\x3d\x72\x6f\x6f\x74\x0d\x0a\x54\x6f\x3a\x20\x3c\x73\x69\x70\x3a\x6e\x6d\x32\x40\x6e\x6d\x32\x3e\x0d\x0a\x43\x61\x6c\x6c\x2d\x49\x44\x3a\x20\x35\x30\x30\x30\x30\x0d\x0a\x43\x53\x65\x71\x3a\x20\x34\x32\x20\x4f\x50\x54\x49\x4f\x4e\x53\x0d\x0a\x4d\x61\x78\x2d\x46\x6f\x72\x77\x61\x72\x64\x73\x3a\x20\x37\x30\x0d\x0a\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x4c\x65\x6e\x67\x74\x68\x3a\x20\x30\x0d\x0a\x43\x6f\x6e\x74\x61\x63\x74\x3a\x20\x3c\x73\x69\x70\x3a\x6e\x6d\x40\x6e\x6d\x3e\x0d\x0a\x41\x63\x63\x65\x70\x74\x3a\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x73\x64\x70\x0d\x0a\x0d\x0a"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("SIP"),
				},
			},
		},
		},
	},
	{
		Protocol: "smtp",
		TcpPorts: []int{25, 587},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("ESMTP"),
				},
			},
		},
		},
	},
	{
		Protocol: "smtps",
		TcpPorts: []int{465, 587},
		UdpPorts: []int{},
		IsSsl:    true,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("ESMTP"),
				},
			},
		},
		},
	},
	{
		Protocol: "ssh",
		TcpPorts: []int{22, 2222, 22222},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("SSH"),
				},
			},
		},
		},
	},
	{
		Protocol: "telnet",
		TcpPorts: []int{23, 2601, 2323},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xff\xfd"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\xff\xfb"),
				},
			},
		},
		},
	},
	{
		Protocol: "imap",
		TcpPorts: []int{143, 993},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("* OK"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("* BYE"),
				},
			},
		},
		},
	},
	{
		Protocol: "imaps",
		TcpPorts: []int{993, 995},
		UdpPorts: []int{},
		IsSsl:    true,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("* OK"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("* BYE"),
				},
			},
		},
		},
	},
	{
		Protocol: "pop3",
		TcpPorts: []int{110, 995},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x55\x53\x45\x52\x20\x77\x6f\x72\x6c\x64\x40\x67\x6d\x61\x69\x6c\x2e\x63\x6f\x6d"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("+OK"),
				},
			},
		},
		},
	},
	{
		Protocol: "pop3s",
		TcpPorts: []int{110, 995},
		UdpPorts: []int{},
		IsSsl:    true,
		Rules: []Rule{{
			Payload: []byte("\x55\x53\x45\x52\x20\x77\x6f\x72\x6c\x64\x40\x67\x6d\x61\x69\x6c\x2e\x63\x6f\x6d"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("+OK"),
				},
			},
		},
		},
	},
	{
		Protocol: "vnc",
		TcpPorts: []int{5900},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("RFB "),
				},
			},
		},
		},
	},
	{
		Protocol: "upnp",
		TcpPorts: []int{},
		UdpPorts: []int{1900},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x4d\x2d\x53\x45\x41\x52\x43\x48\x20\x2a\x20\x48\x54\x54\x50\x2f\x31\x2e\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x20\x32\x33\x39\x2e\x32\x35\x35\x2e\x32\x35\x35\x2e\x32\x35\x30\x3a\x31\x39\x30\x30\x0d\x0a\x53\x54\x3a\x20\x75\x70\x6e\x70\x3a\x72\x6f\x6f\x74\x64\x65\x76\x69\x63\x65\x0d\x0a\x4d\x61\x6e\x3a\x20\x22\x73\x73\x64\x70\x3a\x64\x69\x73\x63\x6f\x76\x65\x72\x22\x0d\x0a\x4d\x58\x3a\x20\x33\x0d\x0a\x0d\x0a"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("HTTP"),
				},
			},
		},
		},
	},
	{
		Protocol: "postgres",
		TcpPorts: []int{5432},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\x2a\x00\x03\x00\x00\x64\x61\x74\x61\x62\x61\x73\x65\x00\x74\x65\x6d\x70\x6c\x61\x74\x65\x30\x00\x75\x73\x65\x72\x00\x70\x6f\x73\x74\x67\x72\x65\x73\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x00\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "afp",
		TcpPorts: []int{548},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x03\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x0f\x00"),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("AFP"),
				},
			},
		},
		},
	},
	{
		Protocol: "x11",
		TcpPorts: []int{6000, 6001},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x6C\x00\x0B\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x01\x00\x0b\x00\x00"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x16\x0b\x00\x00\x00\x06\x00No protocol specified"),
				},
				{
					Pattern: "equal",
					Keyword: []byte("\x00\x2D\x0B\x00\x00\x00\x0C\x00"),
				},
				{
					Pattern: "equal",
					Keyword: []byte("\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x00"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x00J\x0b\x00\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "mssql",
		TcpPorts: []int{1433, 1434},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x12\x01\x00\x34\x00\x00\x00\x00\x00\x00\x15\x00\x06\x01\x00\x1b\x00\x01\x02\x00\x1c\x00\x0c\x03\x00\x28\x00\x04\xff\x08\x00\x01\x55\x00\x00\x02\x4d\x53\x53\x51\x4c\x53\x65\x72\x76\x65\x72\x00\x00\x00\x31\x32"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x04\x01\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "mqtt",
		TcpPorts: []int{1883},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},

	//todo 未完成
	{
		Protocol: "kafka",
		TcpPorts: []int{9092, 9093},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "elasticsearch",
		TcpPorts: []int{9300, 8040},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},

	//todo 未完成
	{
		Protocol: "spark",
		TcpPorts: []int{10000, 15000, 25000},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "daytime",
		TcpPorts: []int{13},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "socks4",
		TcpPorts: []int{1080},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x04\x01\x00\x16\x7f\x00\x00\x01root\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x5a"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x5b"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x5c"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x5d"),
				},
			},
		},
		},
	},
	//数据库协议mongdb
	{
		Protocol: "mongodb",
		TcpPorts: []int{27017, 1883, 50050, 50070},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x41\x00\x00\x00\x3a\x30\x00\x00\xff\xff\xff\xff\xd4\x07\x00\x00\x00\x00\x00\x00test.$cmd\x00\x00\x00\x00\x00\xff\xff\xff\xff\x1b\x00\x00\x00\x01serverStatus\x00\x00\x00\x00\x00\x00\x00\xf0\x3f\x00"),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("serverStatus requires authentication"),
				},
				{
					Pattern: "contains",
					Keyword: []byte("uptimeEstimate"),
				},
				{
					Pattern: "contains",
					Keyword: []byte("serverStatus"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "isakmp",
		TcpPorts: []int{},
		UdpPorts: []int{500, 113},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},
	//高级消息队列协议
	{
		Protocol: "amqp",
		TcpPorts: []int{5672},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("AMQP\x00\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "socks5",
		TcpPorts: []int{1080, 20000},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x05\x04\x00\x01\x02\x80\x05\x01\x00\x03\x0agoogle.com\x00\x50GET / HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x05\x00\x05"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x05\x01"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x05\x02"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("\x05\xFF"),
				},
			},
		},
		},
	},

	//可扩展消息与存在协议，Extensible Messaging and Presence Protocol
	{
		Protocol: "xmpp",
		TcpPorts: []int{5222, 5269},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x3c\x73\x74\x72\x65\x61\x6d\x3a\x73\x74\x72\x65\x61\x6d\x20\x74\x6f\x3d\x27\x6a\x61\x62\x62\x65\x72\x2e\x6f\x72\x67\x27\x20\x78\x6d\x6c\x6e\x73\x3a\x73\x74\x72\x65\x61\x6d\x3d\x27\x68\x74\x74\x70\x3a\x2f\x2f\x65\x74\x68\x65\x72\x78\x2e\x6a\x61\x62\x62\x65\x72\x2e\x6f\x72\x67\x2f\x73\x74\x72\x65\x61\x6d\x73\x27\x20\x78\x6d\x6c\x6e\x73\x3d\x27\x6a\x61\x62\x62\x65\x72\x3a\x63\x6c\x69\x65\x6e\x74\x27\x20\x78\x6d\x6c\x3a\x6c\x61\x6e\x67\x3d\x27\x65\x6e\x27\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x27\x31\x2e\x30\x27\x3e"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("<?xml version="),
				},
			},
		},
		},
	},
	//linux 文件同步程序
	{
		Protocol: "rsync",
		TcpPorts: []int{873},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("@RSYNCD:"),
				},
			},
		},
		},
	},
	{
		Protocol: "bgp",
		TcpPorts: []int{179},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x1d\x01\x04\x25\x1a\x00\xb4\xcb\x65\x57\xb1\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
				},
			},
		},
		},
	},
	{
		Protocol: "redis",
		TcpPorts: []int{6379, 15000},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x2a\x31\x0d\x0a\x24\x34\x0d\x0a\x69\x6e\x66\x6f\x0d\x0a"),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("redis_version"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("-NOAUTH"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("-ERR"),
				},
				{
					Pattern: "prefix",
					Keyword: []byte("-DENIED Redis"),
				},
			},
		},
		},
	},
	{
		Protocol: "l2tpv2",
		TcpPorts: []int{},
		UdpPorts: []int{1701},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\xc8\x02\x00\x3c\x00\x00\x00\x00\x00\x00\x00\x00\x80\x08\x00\x00\x00\x00\x00\x01\x80\x08\x00\x00\x00\x02\x01\x00\x80\x0e\x00\x00\x00\x07\x6e\x78\x70\x2d\x73\x63\x61\x6e\x80\x0a\x00\x00\x00\x03\x00\x00\x00\x03\x80\x08\x00\x00\x00\x09\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xc8\x02\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "ikev2",
		TcpPorts: []int{},
		UdpPorts: []int{500},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x11\x22\x33\x44\x55\x66\x77\x00\x00\x00\x00\x00\x00\x00\x00\x01\x10\x02\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\xa4\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x98\x01\x01\x00\x04\x03\x00\x00\x24\x01\x01\x00\x00\x80\x01\x00\x05\x80\x02\x00\x02\x80\x03\x00\x01\x80\x04\x00\x02\x80\x0b\x00\x01\x00\x0c\x00\x04\x00\x00\x00\x01\x03\x00\x00\x24\x02\x01\x00\x00\x80\x01\x00\x05\x80\x02\x00\x01\x80\x03\x00\x01\x80\x04\x00\x02\x80\x0b\x00\x01\x00\x0c\x00\x04\x00\x00\x00\x01\x03\x00\x00\x24\x03\x01\x00\x00\x80\x01\x00\x01\x80\x02\x00\x02\x80\x03\x00\x01\x80\x04\x00\x02\x80\x0b\x00\x01\x00\x0c\x00\x04\x00\x00\x00\x01\x00\x00\x00\x24\x04\x01\x00\x00\x80\x01\x00\x01\x80\x02\x00\x01\x80\x03\x00\x01\x80\x04\x00\x02\x80\x0b\x00\x01\x00\x0c\x00\x04\x00\x00\x00\x01"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x11\x22\x33\x44\x55\x66\x77"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "snmp",
		TcpPorts: []int{},
		UdpPorts: []int{161, 162},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\x66\xfe\x53\x4d\x42\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x83\x00\x00\x01\x8f"),
				},
			},
		},
		},
	},
	// ncacn_http/

	{
		Protocol: "ncacn_http",
		TcpPorts: []int{49157, 3388, 6001, 6002, 49670},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("ncacn_http"),
				},
			},
		},
		},
	},
	//smb协议用于共享打印机、文件访问、串行端口以及网络上的节点之间的其他通信
	{
		Protocol: "smb",
		TcpPorts: []int{445, 139},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\x66\xfe\x53\x4d\x42\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x00\x00\xaa\xfeSMB"),
				},
			},
		},
		},
	},
	{
		Protocol: "bandwidth-test",
		TcpPorts: []int{2000, 49152, 8000, 49153, 49154},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x01\x00\x00\x00"),
				},
			},
		},
		},
	},
	//todo 未完成
	{
		Protocol: "svrloc",
		TcpPorts: []int{},
		UdpPorts: []int{427},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x01\x00\x00\x00"),
				},
			},
		},
		},
	},
	//netbios
	{
		Protocol: "netbios",
		TcpPorts: []int{},
		UdpPorts: []int{427},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte(""),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x01\x00\x00\x00"),
				},
			},
		},
		},
	},
	{
		Protocol: "netbios-ssn",
		TcpPorts: []int{139},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\x66\xfe\x53\x4d\x42\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x83\x00\x00\x01\x8f"),
				},
			},
		},
		},
	},
	//zookeeper是Hadoop和Hbase的重要组件，可以为分布式应用程序协调服务
	{
		Protocol: "zookeeper",
		TcpPorts: []int{2181},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("envi"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("Environment:"),
				},
			},
		},
		},
	},
	//portmap端口映射是一个服务器，将RPC程序号转换为DARPA的协议端口号，在使用RPC调用时它必须运行
	{
		Protocol: "portmap",
		TcpPorts: []int{111},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x80\x00\x00\x28\xb7\x60\x85\xeb\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x86\xa0\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x80\x00"),
				},
			},
		},
		},
	},
	//“轻量级目录访问协议”（LDAP）是一种用于访问目录服务的业界标准方法。 目录服务是一个关于分布式环境中的多个系统和服务的资源信息的存储库
	{
		Protocol: "ldap",
		TcpPorts: []int{389},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x30\x0c\x02\x01\x01\x60\x07\x02\x01\x03\x04\x00\x80\x00"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00"),
				},
				{
					Pattern: "equal",
					Keyword: []byte("\x30\x84\x00\x00\x00\x10\x02\x01\x01a\x84\x00\x00\x00\x07\n\x01\x00\x04\x00"),
				},
			},
		},
		},
	},

	{
		Protocol: "ldaps",
		TcpPorts: []int{636},
		UdpPorts: []int{},
		IsSsl:    true,
		Rules: []Rule{{
			Payload: []byte("\x30\x0c\x02\x01\x01\x60\x07\x02\x01\x03\x04\x00\x80\x00"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00"),
				},
				{
					Pattern: "equal",
					Keyword: []byte("\x30\x84\x00\x00\x00\x10\x02\x01\x01a\x84\x00\x00\x00\x07\n\x01\x00\x04\x00"),
				},
			},
		},
		},
	},
	//ETCD是用于共享配置和服务发现的分布式，一致性的KV存储系统
	{
		Protocol: "etcd",
		TcpPorts: []int{2379},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("GET /version HTTP/1.0\r\n\r\n"),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("etcdserver"),
				},
			},
		},
		},
	},
	//工控协议专题
	//CoDeSys编程接口在全球范围内使用广泛，全球上百个设备制造商的自动化设备中都是用了该编程接口。
	{
		Protocol: "codesys",
		TcpPorts: []int{2455, 1200, 1201},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\xbb\xbb\x01\x00\x00\x00\x01"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xbb\xbb\xce\x00\x00\x00"),
				},
			},
		},
		},
	},

	//s7协议是SIEMENS s7协议族的标准通信协议，使用s7-应用接口的通信不依赖特定的总线系统。
	{
		Protocol: "s7",
		TcpPorts: []int{102},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x03\x00\x00\x16\x11\xe0\x00\x00\x00\x14\x00\xc1\x02\x01\x00\xc2\x02\x01\x02\xc0\x01\x0a"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x03\x00\x00"),
				},
			},
		},
		},
	},
	//欧姆龙PLC使用网络协议FINS进行通信，可通过多种不同的物理网络，如以太网、控制器连接等。
	{
		Protocol: "omron",
		TcpPorts: []int{},
		UdpPorts: []int{9600},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x80\x00\x02\x00\x00\x00\x00\x63\x00\xef\x05\x01\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xc0\x00\x02\x00c\x00\x00"),
				},
			},
		},
		},
	},
	//Modbus协议是应用于电子控制器上的一种协议。通过此协议设备间可以通信。它已成为一通用工业标准。
	{
		Protocol: "modbus",
		TcpPorts: []int{502, 503},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\x00\x00\x05\x00\x2b\x0e\x02\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x00\x00\x00\x00"),
				},
			},
		},
		},
	},
	//Fox协议是Tridium公司开发的Niagara框架的一部分，广泛应用于楼宇自动化控制系统。
	{
		Protocol: "fox",
		TcpPorts: []int{1911, 4911},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x66\x6f\x78\x20\x61\x20\x31\x20\x2d\x31\x20\x66\x6f\x78\x20\x68\x65\x6c\x6c\x6f\x0a\x7b\x0a\x66\x6f\x78\x2e\x76\x65\x72\x73\x69\x6f\x6e\x3d\x73\x3a\x31\x2e\x30\x0a\x69\x64\x3d\x69\x3a\x31\x0a\x68\x6f\x73\x74\x4e\x61\x6d\x65\x3d\x73\x3a\x78\x70\x76\x6d\x2d\x30\x6f\x6d\x64\x63\x30\x31\x78\x6d\x79\x0a\x68\x6f\x73\x74\x41\x64\x64\x72\x65\x73\x73\x3d\x73\x3a\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x2e\x31\x32\x35\x0a\x61\x70\x70\x2e\x6e\x61\x6d\x65\x3d\x73\x3a\x57\x6f\x72\x6b\x62\x65\x6e\x63\x68\x0a\x61\x70\x70\x2e\x76\x65\x72\x73\x69\x6f\x6e\x3d\x73\x3a\x33\x2e\x37\x2e\x34\x34\x0a\x76\x6d\x2e\x6e\x61\x6d\x65\x3d\x73\x3a\x4a\x61\x76\x61\x20\x48\x6f\x74\x53\x70\x6f\x74\x28\x54\x4d\x29\x20\x53\x65\x72\x76\x65\x72\x20\x56\x4d\x0a\x76\x6d\x2e\x76\x65\x72\x73\x69\x6f\x6e\x3d\x73\x3a\x32\x30\x2e\x34\x2d\x62\x30\x32\x0a\x6f\x73\x2e\x6e\x61\x6d\x65\x3d\x73\x3a\x57\x69\x6e\x64\x6f\x77\x73\x20\x58\x50\x0a\x6f\x73\x2e\x76\x65\x72\x73\x69\x6f\x6e\x3d\x73\x3a\x35\x2e\x31\x0a\x6c\x61\x6e\x67\x3d\x73\x3a\x65\x6e\x0a\x74\x69\x6d\x65\x5a\x6f\x6e\x65\x3d\x73\x3a\x41\x6d\x65\x72\x69\x63\x61\x2f\x4c\x6f\x73\x5f\x41\x6e\x67\x65\x6c\x65\x73\x3b\x2d\x32\x38\x38\x30\x30\x30\x30\x30\x3b\x33\x36\x30\x30\x30\x30\x30\x3b\x30\x32\x3a\x30\x30\x3a\x30\x30\x2e\x30\x30\x30\x2c\x77\x61\x6c\x6c\x2c\x6d\x61\x72\x63\x68\x2c\x38\x2c\x6f\x6e\x20\x6f\x72\x20\x61\x66\x74\x65\x72\x2c\x73\x75\x6e\x64\x61\x79\x2c\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x3b\x30\x32\x3a\x30\x30\x3a\x30\x30\x2e\x30\x30\x30\x2c\x77\x61\x6c\x6c\x2c\x6e\x6f\x76\x65\x6d\x62\x65\x72\x2c\x31\x2c\x6f\x6e\x20\x6f\x72\x20\x61\x66\x74\x65\x72\x2c\x73\x75\x6e\x64\x61\x79\x2c\x75\x6e\x64\x65\x66\x69\x6e\x65\x64\x0a\x68\x6f\x73\x74\x49\x64\x3d\x73\x3a\x57\x69\x6e\x2d\x39\x39\x43\x42\x2d\x44\x34\x39\x44\x2d\x35\x34\x34\x32\x2d\x30\x37\x42\x42\x0a\x76\x6d\x55\x75\x69\x64\x3d\x73\x3a\x38\x62\x35\x33\x30\x62\x63\x38\x2d\x37\x36\x63\x35\x2d\x34\x31\x33\x39\x2d\x61\x32\x65\x61\x2d\x30\x66\x61\x62\x64\x33\x39\x34\x64\x33\x30\x35\x0a\x62\x72\x61\x6e\x64\x49\x64\x3d\x73\x3a\x76\x79\x6b\x6f\x6e\x0a\x7d\x3b\x3b\x0a"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("fox a 0 -1 fox hello"),
				},
			},
		},
		},
	},

	//todo protocol="ethernetip" && base_protocol!="udp"
	//Ethernet/IP是一个面向工业自动化应用的工业支撑层协议。它建立在标准UDP/IP与TCP/IP协议之上，利用固定的以太网硬件和软件，为配置、访问和控制工业自动化设备定义了一个支撑层协议。
	// {
	// 	Protocol: "ethernetip",
	// 	TcpPorts: []int{44818},
	// 	UdpPorts: []int{44818},
	// 	IsSsl:    false,
	// 	Rules: []Rule{{
	// 		Payload: []byte(""),
	// 		Match: []Matches{
	// 			{
	// 				Pattern: "contains",
	// 				Keyword: []byte(""),
	// 			},
	// 		},
	// 	},
	// 	},
	// },

	//DNP(Distributed Network Protocol，分布式网络规约)是一种应用于自动化组件之间的通讯协议，常见于电力、水处理等行业。SCADA可以使用DNP协议与主站、RTU、及IED进行通讯。
	{
		Protocol: "dnp3",
		TcpPorts: []int{20000, 19999},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x05\x64\x05\xc9\x00\x00\x00\x00\x36\x4c\x05\x64\x05\xc9\x01\x00\x00\x00\xde\x8e\x05\x64\x05\xc9\x02\x00\x00\x00\x9f\x84\x05\x64\x05\xc9\x03\x00\x00\x00\x77\x46\x05\x64\x05\xc9\x04\x00\x00\x00\x1d\x90\x05\x64\x05\xc9\x05\x00\x00\x00\xf5\x52\x05\x64\x05\xc9\x06\x00\x00\x00\xb4\x58\x05\x64\x05\xc9\x07\x00\x00\x00\x5c\x9a\x05\x64\x05\xc9\x08\x00\x00\x00\x19\xb9\x05\x64\x05\xc9\x09\x00\x00\x00\xf1\x7b\x05\x64\x05\xc9\x0a\x00\x00\x00\xb0\x71\x05\x64\x05\xc9\x0b\x00\x00\x00\x58\xb3\x05\x64\x05\xc9\x0c\x00\x00\x00\x32\x65\x05\x64\x05\xc9\x0d\x00\x00\x00\xda\xa7\x05\x64\x05\xc9\x0e\x00\x00\x00\x9b\xad\x05\x64\x05\xc9\x0f\x00\x00\x00\x73\x6f\x05\x64\x05\xc9\x10\x00\x00\x00\x11\xeb\x05\x64\x05\xc9\x11\x00\x00\x00\xf9\x29\x05\x64\x05\xc9\x12\x00\x00\x00\xb8\x23\x05\x64\x05\xc9\x13\x00\x00\x00\x50\xe1\x05\x64\x05\xc9\x14\x00\x00\x00\x3a\x37\x05\x64\x05\xc9\x15\x00\x00\x00\xd2\xf5\x05\x64\x05\xc9\x16\x00\x00\x00\x93\xff\x05\x64\x05\xc9\x17\x00\x00\x00\x7b\x3d\x05\x64\x05\xc9\x18\x00\x00\x00\x3e\x1e\x05\x64\x05\xc9\x19\x00\x00\x00\xd6\xdc\x05\x64\x05\xc9\x1a\x00\x00\x00\x97\xd6\x05\x64\x05\xc9\x1b\x00\x00\x00\x7f\x14\x05\x64\x05\xc9\x1c\x00\x00\x00\x15\xc2\x05\x64\x05\xc9\x1d\x00\x00\x00\xfd\x00\x05\x64\x05\xc9\x1e\x00\x00\x00\xbc\x0a\x05\x64\x05\xc9\x1f\x00\x00\x00\x54\xc8\x05\x64\x05\xc9\x20\x00\x00\x00\x01\x4f\x05\x64\x05\xc9\x21\x00\x00\x00\xe9\x8d\x05\x64\x05\xc9\x22\x00\x00\x00\xa8\x87\x05\x64\x05\xc9\x23\x00\x00\x00\x40\x45\x05\x64\x05\xc9\x24\x00\x00\x00\x2a\x93\x05\x64\x05\xc9\x25\x00\x00\x00\xc2\x51\x05\x64\x05\xc9\x26\x00\x00\x00\x83\x5b\x05\x64\x05\xc9\x27\x00\x00\x00\x6b\x99\x05\x64\x05\xc9\x28\x00\x00\x00\x2e\xba\x05\x64\x05\xc9\x29\x00\x00\x00\xc6\x78\x05\x64\x05\xc9\x2a\x00\x00\x00\x87\x72\x05\x64\x05\xc9\x2b\x00\x00\x00\x6f\xb0\x05\x64\x05\xc9\x2c\x00\x00\x00\x05\x66\x05\x64\x05\xc9\x2d\x00\x00\x00\xed\xa4\x05\x64\x05\xc9\x2e\x00\x00\x00\xac\xae\x05\x64\x05\xc9\x2f\x00\x00\x00\x44\x6c\x05\x64\x05\xc9\x30\x00\x00\x00\x26\xe8\x05\x64\x05\xc9\x31\x00\x00\x00\xce\x2a\x05\x64\x05\xc9\x32\x00\x00\x00\x8f\x20\x05\x64\x05\xc9\x33\x00\x00\x00\x67\xe2\x05\x64\x05\xc9\x34\x00\x00\x00\x0d\x34\x05\x64\x05\xc9\x35\x00\x00\x00\xe5\xf6\x05\x64\x05\xc9\x36\x00\x00\x00\xa4\xfc\x05\x64\x05\xc9\x37\x00\x00\x00\x4c\x3e\x05\x64\x05\xc9\x38\x00\x00\x00\x09\x1d\x05\x64\x05\xc9\x39\x00\x00\x00\xe1\xdf\x05\x64\x05\xc9\x3a\x00\x00\x00\xa0\xd5\x05\x64\x05\xc9\x3b\x00\x00\x00\x48\x17\x05\x64\x05\xc9\x3c\x00\x00\x00\x22\xc1\x05\x64\x05\xc9\x3d\x00\x00\x00\xca\x03\x05\x64\x05\xc9\x3e\x00\x00\x00\x8b\x09\x05\x64\x05\xc9\x3f\x00\x00\x00\x63\xcb\x05\x64\x05\xc9\x40\x00\x00\x00\x58\x4a\x05\x64\x05\xc9\x41\x00\x00\x00\xb0\x88\x05\x64\x05\xc9\x42\x00\x00\x00\xf1\x82\x05\x64\x05\xc9\x43\x00\x00\x00\x19\x40\x05\x64\x05\xc9\x44\x00\x00\x00\x73\x96\x05\x64\x05\xc9\x45\x00\x00\x00\x9b\x54\x05\x64\x05\xc9\x46\x00\x00\x00\xda\x5e\x05\x64\x05\xc9\x47\x00\x00\x00\x32\x9c\x05\x64\x05\xc9\x48\x00\x00\x00\x77\xbf\x05\x64\x05\xc9\x49\x00\x00\x00\x9f\x7d\x05\x64\x05\xc9\x4a\x00\x00\x00\xde\x77\x05\x64\x05\xc9\x4b\x00\x00\x00\x36\xb5\x05\x64\x05\xc9\x4c\x00\x00\x00\x5c\x63\x05\x64\x05\xc9\x4d\x00\x00\x00\xb4\xa1\x05\x64\x05\xc9\x4e\x00\x00\x00\xf5\xab\x05\x64\x05\xc9\x4f\x00\x00\x00\x1d\x69\x05\x64\x05\xc9\x50\x00\x00\x00\x7f\xed\x05\x64\x05\xc9\x51\x00\x00\x00\x97\x2f\x05\x64\x05\xc9\x52\x00\x00\x00\xd6\x25\x05\x64\x05\xc9\x53\x00\x00\x00\x3e\xe7\x05\x64\x05\xc9\x54\x00\x00\x00\x54\x31\x05\x64\x05\xc9\x55\x00\x00\x00\xbc\xf3\x05\x64\x05\xc9\x56\x00\x00\x00\xfd\xf9\x05\x64\x05\xc9\x57\x00\x00\x00\x15\x3b\x05\x64\x05\xc9\x58\x00\x00\x00\x50\x18\x05\x64\x05\xc9\x59\x00\x00\x00\xb8\xda\x05\x64\x05\xc9\x5a\x00\x00\x00\xf9\xd0\x05\x64\x05\xc9\x5b\x00\x00\x00\x11\x12\x05\x64\x05\xc9\x5c\x00\x00\x00\x7b\xc4\x05\x64\x05\xc9\x5d\x00\x00\x00\x93\x06\x05\x64\x05\xc9\x5e\x00\x00\x00\xd2\x0c\x05\x64\x05\xc9\x5f\x00\x00\x00\x3a\xce\x05\x64\x05\xc9\x60\x00\x00\x00\x6f\x49\x05\x64\x05\xc9\x61\x00\x00\x00\x87\x8b\x05\x64\x05\xc9\x62\x00\x00\x00\xc6\x81\x05\x64\x05\xc9\x63\x00\x00\x00\x2e\x43\x05\x64\x05\xc9\x64\x00\x00\x00\x44\x95"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x05d\x05"),
				},
			},
		},
		},
	},

	//楼宇自动控制网络数据通讯协议(BACnet)是针对采暖、通风、空调、制冷控制设备所设计，同时也为其他楼宇控制系统（例如照明、安保、消防等系统）的集成提供一个基本原则。
	{
		Protocol: "bacnet",
		TcpPorts: []int{},
		UdpPorts: []int{47808},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x81\x0a\x00\x11\x01\x04\x00\x05\x01\x0c\x0c\x02\x3f\xff\xff\x19\x46"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x81\x0a\x00"),
				},
			},
		},
		},
	},

	//MELSEC-Q系列设备使用专用的网络协议进行通讯，该系列设备可以提供高速、大容量的数据处理和机器控制。
	{
		Protocol: "melsecq",
		TcpPorts: []int{5007},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x57\x00\x00\x00\x00\x11\x11\x07\x00\x00\xff\xff\x03\x00\x00\xfe\x03\x00\x00\x14\x00\x1c\x08\x0a\x08\x00\x00\x00\x00\x00\x00\x00\x04\x01\x01\x01\x00\x00\x00\x00\x01"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\xd7\x00"),
				},
			},
		},
		},
	},

	//PCWorx协议由菲尼克斯电气公司开发，目前广泛使用于工控系统。PCWORX3.11是菲尼克斯电气公司的专用协议。
	{
		Protocol: "pcworx",
		TcpPorts: []int{1962},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x01\x01\x00\x1a\x00\x00\x00\x00\x78\x80\x00\x03\x00\x0c\x49\x42\x45\x54\x48\x30\x31\x4e\x30\x5f\x4d\x00"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x81\x01\x00\x14\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00"),
				},
			},
		},
		},
	},

	//ProConOS是德国科维公司(KW-Software GmbH)开发的用于PLC的实时操作系统，它是一个高性能的PLC运行时引擎，目前广泛使用于基于嵌入式和PC的工控系统。
	{
		Protocol: "proconos",
		TcpPorts: []int{20547},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\xcc\x01\x00\x0b\x40\x02\x00\x00\x47\xee"),
			Match: []Matches{
				{
					Pattern: "contains",
					Keyword: []byte("ProConOS"),
				},
			},
		},
		},
	},

	//redlion 协议被Crimson桌面软件用于与Red Lion G306工控系统的HMI人机接口。
	{
		Protocol: "redlion",
		TcpPorts: []int{789},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x04\x01\x2b\x1b\x00"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x00\x16\x01\x2b\x03\x00\x52\x65\x64\x20\x4c\x69\x6f\x6e\x20\x43\x6f\x6e\x74\x72\x6f\x6c\x73\x00"),
				},
			},
		},
		},
	},

	//104是国际电工委员会制定的一个规范，用于适应和引导电力系统调度自动化的发展，规范调度自动化及远动设备的技术性能。
	{
		Protocol: "iec",
		TcpPorts: []int{2404},
		UdpPorts: []int{},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x68\x04\x43\x00\x00\x00"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x68\x04\x83\x00\x00\x00"),
				},
			},
		},
		},
	},

	//Moxa 串口服务器专为工业应用而设计。不通配置组合的串口服务器更能符合不同工业现场的需求。NPort系列串口服务器让传统 RS-232/422/485设备立即联网，提供您基于IP的串口联网解决方案。
	{
		Protocol: "moxa-nport",
		TcpPorts: []int{},
		UdpPorts: []int{4800},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x10\x1f\x00\x04\x4d\x51\x54\x54\x04\xc2\x00\x0a\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94\x00\x05\x41\xf0\xaa\x9b\x94"),
			Match: []Matches{
				{
					Pattern: "equal",
					Keyword: []byte("\x20\x02\x00\x00"),
				},
			},
		},
		},
	},

	//lantronix
	{
		Protocol: "lantronix",
		TcpPorts: []int{},
		UdpPorts: []int{30718},
		IsSsl:    false,
		Rules: []Rule{{
			Payload: []byte("\x00\x00\x00\xf6"),
			Match: []Matches{
				{
					Pattern: "prefix",
					Keyword: []byte("\x00\x00\x00\xf7\x00"),
				},
			},
		},
		},
	},
}
